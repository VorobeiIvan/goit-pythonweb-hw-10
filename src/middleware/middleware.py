import os
import logging
import time
from dotenv import load_dotenv
from starlette.middleware.base import BaseHTTPMiddleware
from fastapi import FastAPI, Request

"""
–§–∞–π–ª middleware.py

–¶–µ–π —Ñ–∞–π–ª –∑–∞–±–µ–∑–ø–µ—á—É—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª Middleware –¥–ª—è –¥–æ–¥–∞—Ç–∫—É FastAPI, –≤–∫–ª—é—á–∞—é—á–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞,
–ª–æ–≥—É–≤–∞–Ω–Ω—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, –∞ —Ç–∞–∫–æ–∂ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.

–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞, –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–ª—è —Ä–æ–±–æ—Ç–∏ –¥–æ–¥–∞—Ç–∫—É.
2. –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Ö—ñ–¥–Ω–∏—Ö HTTP-–∑–∞–ø–∏—Ç—ñ–≤ —ñ–∑ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–º–∏ —á—É—Ç–ª–∏–≤–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (authorization, cookie).
3. –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Ç–∞ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É.
4. –ì–Ω—É—á–∫—ñ—Å—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–µ—Ä–µ–∑ —Ñ–∞–π–ª `.env` (–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º `dotenv`).

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:
- ConfigValidationMiddleware: Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ø–∏—Ç—ñ–≤.
- sanitize_headers(): –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —á—É—Ç–ª–∏–≤–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤.
"""

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è: —Ä—ñ–≤–µ–Ω—å INFO, —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


def sanitize_headers(headers: dict):
    """
    –ü—Ä–∏—Ö–æ–≤—É—î —á—É—Ç–ª–∏–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É –ª–æ–≥–∞—Ö, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –≤–∏—Ç–æ–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö.

    :param headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ HTTP-–∑–∞–ø–∏—Ç—É —É –≤–∏–≥–ª—è–¥—ñ —Å–ª–æ–≤–Ω–∏–∫–∞.
    :return: –°–ª–æ–≤–Ω–∏–∫ —ñ–∑ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –¥–ª—è —á—É—Ç–ª–∏–≤–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤.
    """
    sensitive_keys = {"authorization", "cookie"}
    return {
        k: ("***" if k.lower() in sensitive_keys else v) for k, v in headers.items()
    }


class ConfigValidationMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.

    –¶–µ–π –∫–ª–∞—Å –∑–∞–±–µ–∑–ø–µ—á—É—î:
    1. –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∫–ª—é—á–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞, –≤–∫–ª—é—á–∞—é—á–∏ SECRET_KEY, ALGORITHM —Ç–∞ ACCESS_TOKEN_EXPIRE_MINUTES.
    2. –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —á–∞—Å –æ–±—Ä–æ–±–∫–∏.
    """

    def __init__(self, app: FastAPI):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Middleware.

        :param app: –ï–∫–∑–µ–º–ø–ª—è—Ä FastAPI –¥–æ–¥–∞—Ç–∫—É.
        """
        super().__init__(app)
        self.validate_env_variables()

    def validate_env_variables(self):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–ª—é—á–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å.

        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∫–ª—é—á–∞—î:
        - –ù–∞—è–≤–Ω—ñ—Å—Ç—å SECRET_KEY.
        - –î–æ–≤–∂–∏–Ω—É SECRET_KEY (–Ω–µ –º–µ–Ω—à–µ 32 —Å–∏–º–≤–æ–ª—ñ–≤).
        - –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å ALGORITHM (–≤—Ö–æ–¥–∏—Ç—å –¥–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤).
        - –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å ACCESS_TOKEN_EXPIRE_MINUTES (–¥–æ–¥–∞—Ç–Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ).

        :raises ValueError: –£ —Ä–∞–∑—ñ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.
        """
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        SECRET_KEY = os.getenv("SECRET_KEY")  # –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –¥–ª—è —Ç–æ–∫–µ–Ω—ñ–≤
        ALGORITHM = os.getenv("ALGORITHM")  # –ê–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
        ACCESS_TOKEN_EXPIRE_MINUTES = os.getenv(
            "ACCESS_TOKEN_EXPIRE_MINUTES", "30"
        )  # –ß–∞—Å –∂–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω—É

        # –ß–∏—Ç–∞—î–º–æ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –∑—ñ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        allowed_algorithms = set(
            os.getenv("ALLOWED_ALGORITHMS", "HS256,RS256").split(",")
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SECRET_KEY
        if not SECRET_KEY:
            logging.error("‚ùå SECRET_KEY –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π")
            raise ValueError("‚ùå SECRET_KEY –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π")

        # –î–æ–≤–∂–∏–Ω–∞ SECRET_KEY
        if len(SECRET_KEY) < 32:
            logging.error("‚ùå SECRET_KEY –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 32 —Å–∏–º–≤–æ–ª—ñ–≤")
            raise ValueError("‚ùå SECRET_KEY –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 32 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –±–µ–∑–ø–µ–∫–∏")

        # –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å ALGORITHM
        if ALGORITHM not in allowed_algorithms:
            logging.error(
                f"‚ùå ALGORITHM –º–∞—î –±—É—Ç–∏ –æ–¥–Ω–∏–º —ñ–∑ {allowed_algorithms}, –æ—Ç—Ä–∏–º–∞–Ω–æ: {ALGORITHM}"
            )
            raise ValueError(f"‚ùå ALGORITHM –º–∞—î –±—É—Ç–∏ –æ–¥–Ω–∏–º —ñ–∑ {allowed_algorithms}")

        # –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å ACCESS_TOKEN_EXPIRE_MINUTES
        try:
            ACCESS_TOKEN_EXPIRE_MINUTES = int(ACCESS_TOKEN_EXPIRE_MINUTES)
            if ACCESS_TOKEN_EXPIRE_MINUTES <= 0:
                raise ValueError("‚ùå ACCESS_TOKEN_EXPIRE_MINUTES –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
        except ValueError:
            raise ValueError("‚ùå ACCESS_TOKEN_EXPIRE_MINUTES –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º")

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        logging.info(
            f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–º—ñ–Ω–Ω—ñ: ALGORITHM={ALGORITHM}, TOKEN_EXPIRATION={ACCESS_TOKEN_EXPIRE_MINUTES} —Ö–≤–∏–ª–∏–Ω"
        )

    async def dispatch(self, request: Request, call_next):
        """
        –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î –∫–æ–∂–µ–Ω HTTP-–∑–∞–ø–∏—Ç, –≤–∏–∫–æ–Ω—É—î –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.

        :param request: –û–±'—î–∫—Ç HTTP-–∑–∞–ø–∏—Ç—É.
        :param call_next: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –∑–∞–ø–∏—Ç—É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É.
        :return: HTTP-–≤—ñ–¥–ø–æ–≤—ñ–¥—å.
        """
        start_time = time.time()  # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –∑ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–º–∏ —á—É—Ç–ª–∏–≤–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        logging.info(
            f"üì• –ó–∞–ø–∏—Ç: {request.method} {request.url} - Headers: {sanitize_headers(dict(request.headers))}"
        )

        # –í–∏–∫–ª–∏–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞
        response = await call_next(request)

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏
        process_time = time.time() - start_time
        logging.info(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.status_code} (‚è± {process_time:.2f}s)")

        return response
